set cut_paste_input [stack 0]
version 13.2 v8
push $cut_paste_input
NoOp {
 name Transform_RotoShape_to_Tracker
 tile_color 0x667cff
 note_font "Bitstream Vera Sans Bold"
 note_font_size 15
 selected true
 xpos 345
 ypos -137
 hide_input true
 addUserKnob {20 User l "RotoShape to Tracker"}
 addUserKnob {22 execute l "Get Tracks " T "import nuke, nuke.rotopaint as rp, math\n\ndef walker(obj, list):\n    for i in obj:\n        x = i.getAttributes()  \n        if isinstance(i, nuke.rotopaint.Shape):\n            list.append(\[i, obj]) \n        if isinstance(i, nuke.rotopaint.Layer):\n            list.append(\[i, obj])\n            walker(i, list)\n    return list\n\n    \ndef TransformToMatrix(point, transf, f):\n    extramatrix = transf.evaluate(f).getMatrix()\n    vector = nuke.math.Vector4(point\[0], point\[1], 1, 1)\n    x = (vector\[0] * extramatrix\[0]) + (vector\[1] * extramatrix\[1]) + extramatrix\[2] + extramatrix\[3]\n    y = (vector\[0] * extramatrix\[4]) + (vector\[1] * extramatrix\[5]) + extramatrix\[6] + extramatrix\[7]\n    z = (vector\[0] * extramatrix\[8]) + (vector\[1] * extramatrix\[9]) + extramatrix\[10] + extramatrix\[11]\n    w = (vector\[0] * extramatrix\[12]) + (vector\[1] * extramatrix\[13]) + extramatrix\[14] + extramatrix\[15]\n    vector = nuke.math.Vector4(x, y, z, w)\n    vector = vector / w\n    return vector\n    \n  \ndef TransformLayers(point, Layer, f, rotoRoot, shapeList):\n    if Layer == rotoRoot:\n        transf = Layer.getTransform()\n        newpoint = TransformToMatrix(point, transf, f)\n\n    else:\n        transf = Layer.getTransform()\n        newpoint = TransformToMatrix(point, transf, f)\n        for x in shapeList: \n            if x\[0] == Layer:\n                newpoint = TransformLayers(newpoint, x\[1], f, rotoRoot, shapeList)\n    return newpoint\n\ndef RotoShape_to_Trackers():\n    rotoNode = nuke.selectedNode()\n    if rotoNode.Class() not in ('Roto', 'RotoPaint'):\n        if nuke.GUI:\n            nuke.message('Unsupported node type. Selected Node must be Roto or RotoPaint')\n        raise TypeError, 'Unsupported node type. Selected Node must be Roto or RotoPaint'\n\n    fRange = nuke.FrameRange(nuke.getInput('Inform the Frame Range to bake', '%s-%s' % (nuke.root().firstFrame(), nuke.root().lastFrame())))\n    rotoCurve = rotoNode\['curves']\n    rotoRoot = rotoCurve.rootLayer\n    shapeList = \[]\n    shapeList = walker(rotoRoot, shapeList)\n    cancel = False\n    for shape in shapeList:\n        if isinstance(shape\[0], nuke.rotopaint.Shape):\n            if cancel:\n                break\n            count = 0\n            trkList = \[]\n            positionsList = \[]\n            task = nuke.ProgressTask('Converting Shape(s)\\nto Trackers\\n')\n            \n            for points in shape\[0]:\n                positionsList.append(\[]) \n  \n            for f in fRange:\n                trker = 0\n                for points in shape\[0]:\n                    if task.isCancelled():\n                        cancel = True\n                        break \n                    if cancel:\n                        break\n                    point = \[points.center.getPosition(f)\[0], points.center.getPosition(f)\[1]]\n                    transf = shape\[0].getTransform()\n                    xy = TransformToMatrix(point, transf, f)\n                    xy = TransformLayers(xy, shape\[1], f, rotoRoot, shapeList)\n                    positionsList\[trker].append(xy)\n                    trker += 1;\n            trker = 0\n            if nuke.NUKE_VERSION_MAJOR >= 7:\n                trackNode = nuke.createNode('Tracker4')\n            for pos in positionsList:\n                if task.isCancelled():\n                    cancel = True\n                    break                \n                if cancel:\n                    break\n                if nuke.NUKE_VERSION_MAJOR < 7:\n                    trackNode = nuke.createNode('Tracker3', inpanel=False)\n                    trackNode.setName(\"POINT_\" + str(trker) + \"_\" + trackNode.name())\n                    trackNode\[\"track1\"].setAnimated(0)\n                    trackNode\[\"track1\"].setAnimated(1)\n                    task.setMessage(shape\[0].name + '\\nBaking point ' + str(trker + 1) + \" of \" + str(len(positionsList)))\n                    \n                    count = 0\n                    for f in fRange:\n                        if task.isCancelled():\n                            cancel = True\n                            break   \n                        task.setProgress(int(((float(f) - fRange.first())+1 / (fRange.last() - fRange.first()+1)* 100)))\n                        a = trackNode\[\"track1\"].animations()\n                        a\[0].setKey(f, pos\[count]\[0])\n                        a\[1].setKey(f, pos\[count]\[1])\n                        count += 1\n                    trker += 1;\n                if nuke.NUKE_VERSION_MAJOR >= 7:\n                    k = trackNode\['tracks']\n                    #===========================================================\n                    # handy ref is here: http://forums.thefoundry.co.uk/phpBB2/viewtopic.php?t=8130\n                    #===========================================================\n                    numColumns = 31\n                    colTrackX = 2\n                    colTrackY = 3\n                    trackNode\[\"add_track\"].execute()\n                    trackIdx = trker # 0 for the first track\n                    count = 0\n                    for f in fRange:\n                        if task.isCancelled():\n                            cancel = True\n                            break   \n                        task.setProgress(int(((float(f) - fRange.first())+1 / (fRange.last() - fRange.first()+1)* 100)))\n                        k.setValueAt(pos\[count]\[0],f, numColumns*trackIdx + colTrackX)\n                        k.setValueAt(pos\[count]\[1],f,numColumns*trackIdx + colTrackY)\n                        count += 1\n                    #===========================================================\n                    # if execution frame is outside the framerange remove the keyframes from it!\n                    #===========================================================\n                    if not fRange.isInRange(nuke.frame()):\n                        for n in range(numColumns): \n                            k.removeKeyAt(nuke.frame(),numColumns*trackIdx + n)                \n                    trker += 1;\n\nif __name__ == '__main__':\n    RotoShape_to_Trackers()" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 directions l Directions: T "1. Select your RotoShape \n2. Remove unnecessary points. This will create a tracker \nfor each point you have in your RotoShape. \nI would have 4 points = 4 tracks.\n3. Make sure your Roto Node is selected\nand press Button and provide your proper frame range in the popup.\n4. Wham. You have tracks based off your RotoShape "}
 addUserKnob {26 ""}
}
