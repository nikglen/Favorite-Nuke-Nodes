set cut_paste_input [stack 0]
version 14.1 v4
Group {
 inputs 0
 name MECtimeliner
 knobChanged "import nuke\nmectimeliner = nuke.thisNode().name()\nnuke.toNode(mectimeliner).knob(0, nuke.toNode(mectimeliner).knob('Startframe')).clearFlag(0)\n\n\nif int(nuke.toNode(mectimeliner).knob('activeInputs').getValue())!=0:\n    nuke.toNode(mectimeliner).knob('MEC1_up').setEnabled(False)\n    for x in range(int(nuke.toNode(mectimeliner).knob('activeInputs').getValue())):\n        nuke.toNode(mectimeliner).knob('MEC'+str(x+1)+'_down').setEnabled(True)\n        if (x+1)==int(nuke.toNode(mectimeliner).knob('activeInputs').getValue()):\n            nuke.toNode(mectimeliner).knob('MEC'+str(int(nuke.toNode(mectimeliner).knob('activeInputs').getValue()))+'_down').setEnabled(False)\n\n\n   "
 tile_color 0xff00ffff
 selected true
 xpos 9339
 ypos -15475
 addUserKnob {20 User l Controls}
 addUserKnob {26 credit l "" +STARTLINE T "Matthias Eckhardt @poly-by-poly.com"}
 addUserKnob {26 ""}
 addUserKnob {22 magic l "add items" t "- select whatever you want to put in a specific order.\n- it is highly advised to name the inputnodes in a way that you can easily identify later on\n- the tool always uses the top framerange of the selected tree. if you want a specific range create a retime node before\n- DO NOT HAVE THE MECretimes OPEN IN THE PROPERTY PANEL, NUKE HAS ISSUES WITH THE UPDATES IF ITS OPEN, they only work properly if they are closed while reordering\n" T "import nuke\nimport math\n\nmectimeliner = nuke.thisNode().name()\n\ndef inputchecker():\n    print 'Checking Selection...'\n    sel = nuke.selectedNodes()\n    global TLitems\n    TLitems = \[]\n    global inputcheckcontinue\n    inputcheckcontinue = 0\n\n    if not sel:\n        print 'nothing selected'\n        inputcheckcontinue = 0\n    else:\n        for x in sel:\n            if len(x.name().split('MEC'))!=2:\n                TLitems.append(str(x.name()))\n                print 'item added: '+str(x.name())\n                inputcheckcontinue = 1\n        if len(TLitems) == 0:\n            inputcheckcontinue = 0\n            print 'no valid item(s) selected'\n    \ndef addknobs(transfer):\n    print 'adding knobs for: '+str(transfer)\n    counter = nuke.toNode(mectimeliner).knob('activeInputs').getValue()\n    counter = counter+1\n\n    checkboxknob = nuke.Boolean_Knob('MEC'+str(int(counter))+'_option', str(transfer))\n    checkboxknob.setFlag(nuke.STARTLINE)\n    nuke.toNode(mectimeliner).addKnob(checkboxknob)\n    nuke.toNode(mectimeliner).knob('MEC'+str(int(counter))+'_option', str(transfer)).setTooltip('reverse clip')\n\n    inknob = nuke.Int_Knob('MEC'+str(int(counter))+'_in', '')\n    inknob.clearFlag(nuke.STARTLINE)\n    nuke.toNode(mectimeliner).addKnob(inknob)\n    outknob = nuke.Int_Knob('MEC'+str(int(counter))+'_out', '')\n    outknob.clearFlag(nuke.STARTLINE)\n    nuke.toNode(mectimeliner).addKnob(outknob)\n\n    upbotton = nuke.PyScript_Knob('MEC'+str(int(counter))+'_up', 'up')\n    nuke.toNode(mectimeliner).addKnob(upbotton)\n\n    downbutton = nuke.PyScript_Knob('MEC'+str(int(counter))+'_down', 'down')\n    nuke.toNode(mectimeliner).addKnob(downbutton)\n\n    deleteinputknob = nuke.PyScript_Knob('MEC'+str(int(counter))+'_remove', 'remove')\n    deleteinputknob.setFlag(nuke.ENDLINE)\n    nuke.toNode(mectimeliner).addKnob(deleteinputknob)\n    \n\n    deleteexpression = \"\"\"import nuke\nmectimeliner = nuke.thisNode().name()\nknobs = nuke.toNode(mectimeliner).knobs()\ncounter = nuke.toNode(mectimeliner).knob('activeInputs').getValue()\nMECpre = 'MEC'+str(int(counter))\nmomentpos = \"\"\"+str(int(counter))+\"\"\"\n\nfor x in range(int(counter-momentpos)):\n    prevUP = nuke.toNode('MECpost_'+str(x+momentpos)).input(0).name()\n    prevTHIS = nuke.toNode('MECpost_'+str(x+momentpos+1)).input(0).name()\n    nuke.toNode('MECpost_'+str(x+momentpos+1)).setInput(0,nuke.toNode(prevUP))\n    nuke.toNode('MECpost_'+str(x+momentpos)).setInput(0,nuke.toNode(prevTHIS))\n    newLabel = nuke.toNode('MECpost_'+str(x+momentpos)).knob('label').getValue()\n    prevLabel = nuke.toNode('MECpost_'+str(x+momentpos+1)).knob('label').getValue()\n    nuke.toNode('MECpost_'+str(x+momentpos)).knob('label').setValue(str(prevLabel))\n    nuke.toNode('MECpost_'+str(x+momentpos+1)).knob('label').setValue(str(newLabel))\n    switchNew = nuke.toNode(mectimeliner).knob('MEC'+str(x+momentpos)+'_option').label()\n    switchOld = nuke.toNode(mectimeliner).knob('MEC'+str(x+momentpos+1)+'_option').label()\n    nuke.toNode(mectimeliner).knob('MEC'+str(x+momentpos)+'_option').setLabel(str(switchOld))\n    nuke.toNode(mectimeliner).knob('MEC'+str(x+momentpos+1)+'_option').setLabel(str(switchNew))\n    prevRangefirst = int(nuke.toNode(mectimeliner).knob('MEC'+str(x+momentpos+1)+'_in').getValue())\n    prevRangelast = int(nuke.toNode(mectimeliner).knob('MEC'+str(x+momentpos+1)+'_out').getValue())\n    newsave = str('MEC'+str(x+momentpos)+'_in')\n    prevsave = str('MEC'+str(x+momentpos)+'_out')\n    nuke.toNode(mectimeliner).knob(newsave).setValue(prevRangefirst)\n    nuke.toNode(mectimeliner).knob(prevsave).setValue(prevRangelast)\n\n\ncounter = counter -1\n\nnuke.toNode(mectimeliner).removeKnob(knobs\[str(MECpre)+'_option'])\nnuke.toNode(mectimeliner).removeKnob(knobs\[str(MECpre)+'_up'])\nnuke.toNode(mectimeliner).removeKnob(knobs\[str(MECpre)+'_down'])\nnuke.toNode(mectimeliner).removeKnob(knobs\[str(MECpre)+'_remove'])\nnuke.toNode(mectimeliner).removeKnob(knobs\[str(MECpre)+'_in'])\nnuke.toNode(mectimeliner).removeKnob(knobs\[str(MECpre)+'_out'])\nnuke.delete(nuke.toNode('MECpost_'+str(int(counter+1))))\nnuke.delete(nuke.toNode('MECretime_'+str(int(counter+1))))\nmecappender = nuke.toNode('MECappender')\nif int(counter)>0:\n    mecappender.setInput(int(counter), None)\nelse:\n    nuke.delete(nuke.toNode('MECappender'))\n\n\nnuke.toNode(mectimeliner).knob('activeInputs').setValue(counter)\"\"\"\n\n    nuke.toNode(mectimeliner).knob('MEC'+str(int(counter))+'_remove').setValue(deleteexpression)\n    \n    defuserthing = \"whatever\"\n    \n    upexpression = \"\"\"import nuke\nmectimeliner = nuke.thisNode().name()\nprevUP = nuke.toNode('MECpost_\"\"\"+str(int(counter-1))+\"\"\"').input(0).name()\nprevTHIS = nuke.toNode('MECpost_\"\"\"+str(int(counter))+\"\"\"').input(0).name()\nnuke.toNode('MECpost_\"\"\"+str(int(counter))+\"\"\"').setInput(0,nuke.toNode(prevUP))\nnuke.toNode('MECpost_\"\"\"+str(int(counter-1))+\"\"\"').setInput(0,nuke.toNode(prevTHIS))\nnewLabel = nuke.toNode('MECpost_\"\"\"+str(int(counter-1))+\"\"\"').knob('label').getValue()\nprevLabel = nuke.toNode('MECpost_\"\"\"+str(int(counter))+\"\"\"').knob('label').getValue()\nnuke.toNode('MECpost_\"\"\"+str(int(counter-1))+\"\"\"').knob('label').setValue(str(prevLabel))\nnuke.toNode('MECpost_\"\"\"+str(int(counter))+\"\"\"').knob('label').setValue(str(newLabel))\n\n\nnewRangefirst = int(nuke.toNode(str(mectimeliner)).knob('MEC\"\"\"+str(int(counter-1))+\"\"\"_in').getValue())\nprevRangefirst = int(nuke.toNode(str(mectimeliner)).knob('MEC\"\"\"+str(int(counter))+\"\"\"_in').getValue())\nnuke.toNode(str(mectimeliner)).knob('MEC\"\"\"+str(int(counter-1))+\"\"\"_in').setValue(prevRangefirst)\nnuke.toNode(str(mectimeliner)).knob('MEC\"\"\"+str(int(counter))+\"\"\"_in').setValue(newRangefirst)\n\nnewRangelast = int(nuke.toNode(str(mectimeliner)).knob('MEC\"\"\"+str(int(counter-1))+\"\"\"_out').getValue())\nprevRangelast = int(nuke.toNode(str(mectimeliner)).knob('MEC\"\"\"+str(int(counter))+\"\"\"_out').getValue())\nnuke.toNode(str(mectimeliner)).knob('MEC\"\"\"+str(int(counter-1))+\"\"\"_out').setValue(prevRangelast)\nnuke.toNode(str(mectimeliner)).knob('MEC\"\"\"+str(int(counter))+\"\"\"_out').setValue(newRangelast)\n\n\nswitchNew = nuke.toNode(mectimeliner).knob('MEC\"\"\"+str(int(counter-1))+\"\"\"_option').label()\nswitchOld = nuke.toNode(mectimeliner).knob('MEC\"\"\"+str(int(counter))+\"\"\"_option').label()\nnuke.toNode(mectimeliner).knob('MEC\"\"\"+str(int(counter-1))+\"\"\"_option').setLabel(str(switchOld))\nnuke.toNode(mectimeliner).knob('MEC\"\"\"+str(int(counter))+\"\"\"_option').setLabel(str(switchNew))\"\"\"\n\n    nuke.toNode(mectimeliner).knob('MEC'+str(int(counter))+'_up').setValue(upexpression)\n    \n    defuserthing = \"whatever\"\n    \n    downexpression = \"\"\"import nuke\nmectimeliner = nuke.thisNode().name()\nprevDOWN = nuke.toNode('MECpost_\"\"\"+str(int(counter+1))+\"\"\"').input(0).name()\nprevTHIS = nuke.toNode('MECpost_\"\"\"+str(int(counter))+\"\"\"').input(0).name()\nnuke.toNode('MECpost_\"\"\"+str(int(counter))+\"\"\"').setInput(0,nuke.toNode(prevDOWN))\nnuke.toNode('MECpost_\"\"\"+str(int(counter+1))+\"\"\"').setInput(0,nuke.toNode(prevTHIS))\nnewLabel = nuke.toNode('MECpost_\"\"\"+str(int(counter))+\"\"\"').knob('label').getValue()\nprevLabel = nuke.toNode('MECpost_\"\"\"+str(int(counter+1))+\"\"\"').knob('label').getValue()\nnuke.toNode('MECpost_\"\"\"+str(int(counter))+\"\"\"').knob('label').setValue(str(prevLabel))\nnuke.toNode('MECpost_\"\"\"+str(int(counter+1))+\"\"\"').knob('label').setValue(str(newLabel))\n\n\nnewRangefirst = int(nuke.toNode(str(mectimeliner)).knob('MEC\"\"\"+str(int(counter+1))+\"\"\"_in').getValue())\nprevRangefirst = int(nuke.toNode(str(mectimeliner)).knob('MEC\"\"\"+str(int(counter))+\"\"\"_in').getValue())\nnuke.toNode(str(mectimeliner)).knob('MEC\"\"\"+str(int(counter+1))+\"\"\"_in').setValue(prevRangefirst)\nnuke.toNode(str(mectimeliner)).knob('MEC\"\"\"+str(int(counter))+\"\"\"_in').setValue(newRangefirst)\n\nnewRangelast = int(nuke.toNode(str(mectimeliner)).knob('MEC\"\"\"+str(int(counter+1))+\"\"\"_out').getValue())\nprevRangelast = int(nuke.toNode(str(mectimeliner)).knob('MEC\"\"\"+str(int(counter))+\"\"\"_out').getValue())\nnuke.toNode(str(mectimeliner)).knob('MEC\"\"\"+str(int(counter+1))+\"\"\"_out').setValue(prevRangelast)\nnuke.toNode(str(mectimeliner)).knob('MEC\"\"\"+str(int(counter))+\"\"\"_out').setValue(newRangelast)\n\n\nswitchNew = nuke.toNode(mectimeliner).knob('MEC\"\"\"+str(int(counter))+\"\"\"_option').label()\nswitchOld = nuke.toNode(mectimeliner).knob('MEC\"\"\"+str(int(counter+1))+\"\"\"_option').label()\nnuke.toNode(mectimeliner).knob('MEC\"\"\"+str(int(counter))+\"\"\"_option').setLabel(str(switchOld))\nnuke.toNode(mectimeliner).knob('MEC\"\"\"+str(int(counter+1))+\"\"\"_option').setLabel(str(switchNew))\"\"\"\n\n    nuke.toNode(mectimeliner).knob('MEC'+str(int(counter))+'_down').setValue(downexpression)\n        \n    nuke.toNode(mectimeliner).knob('activeInputs').setValue(counter)\n    \n\ndef addInputs(transfer):\n    counter = nuke.toNode(mectimeliner).knob('activeInputs').getValue()\n    counter = counter -1\n    print 'adding needed nodes for: '+str(transfer)\n    xpos = nuke.toNode(mectimeliner).knob('xpos').getValue()\n    ypos = nuke.toNode(mectimeliner).knob('ypos').getValue()\n    postagestamp = nuke.createNode('PostageStamp', inpanel=False)\n    postagestamp.knob('name').setValue('MECpost_'+str(int(counter+1)))\n    postagestamp.knob('label').setValue(str(transfer))\n    postagestamp.setInput(0, nuke.toNode(str(transfer)))\n    postagestamp.knob('hide_input').setValue(1)\n    postagestamp.knob('xpos').setValue(xpos+(150*counter))\n    postagestamp.knob('ypos').setValue(ypos+100)\n    \n    retimenode = nuke.createNode('Retime')\n    retimenode.hideControlPanel()\n    retimenode.knob('name').setValue('MECretime_'+str(int(counter+1)))\n    retimenode.setInput(0, postagestamp)\n    retimenode.knob('xpos').setValue(xpos+(150*counter))\n    retimenode.knob('ypos').setValue(ypos+250)\n    retimenode.knob('before').setValue(4)\n    retimenode.knob('after').setValue(4)\n    retimenode.knob('input.first_lock').setValue(1)\n    retimenode.knob('input.last_lock').setValue(1)\n    retimenode.knob('reverse').setExpression(str(mectimeliner)+'.MEC'+str(int(counter+1))+'_option')\n    \n\ndef retimeManager(transfer):\n    print 'setting retimes for: '+str(transfer)\n    counter = int(nuke.toNode(mectimeliner).knob('activeInputs').getValue())\n    nuke.toNode(mectimeliner).knob('MEC'+str(counter)+'_in').setValue(int(nuke.toNode('MECretime_'+str(counter)).knob('input.first').getValue()))\n    nuke.toNode(mectimeliner).knob('MEC'+str(counter)+'_out').setValue(int(nuke.toNode('MECretime_'+str(counter)).knob('input.last').getValue()))\n    nuke.toNode('MECretime_'+str(counter)).knob('input.first').setExpression(str(mectimeliner)+'.MEC'+str(counter)+'_in')\n    nuke.toNode('MECretime_'+str(counter)).knob('input.last').setExpression(str(mectimeliner)+'.MEC'+str(counter)+'_out')\n\n    \ndef mainCombine():\n    counter = int(nuke.toNode(mectimeliner).knob('activeInputs').getValue())\n    xpos = nuke.toNode(mectimeliner).knob('xpos').getValue()\n    ypos = nuke.toNode(mectimeliner).knob('ypos').getValue()\n\n    mecappender = nuke.toNode('MECappender')\n    if not mecappender:\n        nuke.nodes.AppendClip(name = 'MECappender')\n        mecappender = nuke.toNode('MECappender')\n        mecappender.knob('xpos').setValue(xpos)\n        mecappender.knob('ypos').setValue(ypos+350)\n        mecappender.setInput(0, nuke.toNode('MECretime_1'))\n        mecappender.knob('firstFrame').setExpression(str(mectimeliner)+'.startframe')\n        mecappender.knob('fadeIn').setExpression(str(mectimeliner)+'.blendingtime/2')\n        mecappender.knob('fadeOut').setExpression(str(mectimeliner)+'.blendingtime/2')\n\n    for x in range(counter):\n        mecappender.setInput(x, nuke.toNode('MECretime_'+str(x+1)))\n\n\n\n\ndef magic():\n    with nuke.toNode('.'.join(\['root'] + nuke.thisNode().fullName().split('.')\[:-1])):\n        print '   '\n        print 'by Matthias Eckhardt - www.poly-by-poly.com'\n        print '- - - - - - - - - - - - - - - - - - - - - -'\n        print '   '\n        inputchecker()\n        if inputcheckcontinue == 1:\n            for x in TLitems:\n                addknobs(x)\n                addInputs(x)\n                retimeManager(x)\n            mainCombine()\n\n\nmagic()" +STARTLINE}
 addUserKnob {3 startframe l Startframe}
 startframe 1
 addUserKnob {3 blendingtime l "Blending time"}
 addUserKnob {26 ""}
 addUserKnob {3 activeInputs +INVISIBLE}
}
 Output {
  inputs 0
  name Output1
  xpos 15
  ypos 353
 }
 Text2 {
  inputs 0
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "this is just a quick tool i made cause im lazy, dont plan on adding features/updating tbh but if you have an issue just hit me up on twitter or mail and i will get it fixed if its a glaring issue\n\nretime node has some bugs with the UIupdate and internal range reassessment so ya... have to go with appendclip to have it comfortable - its not really useful for any timeline exports bu it is what it is ... there is a retime version i made as well but its clunky so ifyou want to look further into and hit me up and i can send it privately\n\ncheers"
  old_message {{116 104 105 115 32 105 115 32 106 117 115 116 32 97 32 113 117 105 99 107 32 116 111 111 108 32 105 32 109 97 100 101 32 99 97 117 115 101 32 105 109 32 108 97 122 121 44 32 100 111 110 116 32 112 108 97 110 32 111 110 32 97 100 100 105 110 103 32 102 101 97 116 117 114 101 115 47 117 112 100 97 116 105 110 103 32 116 98 104 32 98 117 116 32 105 102 32 121 111 117 32 104 97 118 101 32 97 110 32 105 115 115 117 101 32 106 117 115 116 32 104 105 116 32 109 101 32 117 112 32 111 110 32 116 119 105 116 116 101 114 32 111 114 32 109 97 105 108 32 97 110 100 32 105 32 119 105 108 108 32 103 101 116 32 105 116 32 102 105 120 101 100 32 105 102 32 105 116 115 32 97 32 103 108 97 114 105 110 103 32 105 115 115 117 101 10 10 114 101 116 105 109 101 32 110 111 100 101 32 104 97 115 32 115 111 109 101 32 98 117 103 115 32 119 105 116 104 32 116 104 101 32 85 73 117 112 100 97 116 101 32 97 110 100 32 105 110 116 101 114 110 97 108 32 114 97 110 103 101 32 114 101 97 115 115 101 115 115 109 101 110 116 32 115 111 32 121 97 46 46 46 32 104 97 118 101 32 116 111 32 103 111 32 119 105 116 104 32 97 112 112 101 110 100 99 108 105 112 32 116 111 32 104 97 118 101 32 105 116 32 99 111 109 102 111 114 116 97 98 108 101 32 45 32 105 116 115 32 110 111 116 32 114 101 97 108 108 121 32 117 115 101 102 117 108 32 102 111 114 32 97 110 121 32 116 105 109 101 108 105 110 101 32 101 120 112 111 114 116 115 32 98 117 32 105 116 32 105 115 32 119 104 97 116 32 105 116 32 105 115 32 46 46 46 32 116 104 101 114 101 32 105 115 32 97 32 114 101 116 105 109 101 32 118 101 114 115 105 111 110 32 105 32 109 97 100 101 32 97 115 32 119 101 108 108 32 98 117 116 32 105 116 115 32 99 108 117 110 107 121 32 115 111 32 105 102 121 111 117 32 119 97 110 116 32 116 111 32 108 111 111 107 32 102 117 114 116 104 101 114 32 105 110 116 111 32 97 110 100 32 104 105 116 32 109 101 32 117 112 32 97 110 100 32 105 32 99 97 110 32 115 101 110 100 32 105 116 32 112 114 105 118 97 116 101 108 121 10 10 99 104 101 101 114 115}
    }
  box {0 1255 14793 1556}
  transforms {{0 2}
    }
  cursor_position 545
  center {1024 778}
  cursor_initialised true
  initial_cursor_position {{0 1556}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1024 778 0 0 1 1 0 0 0 0}
    }
  name Text1
  xpos 15
  ypos 293
 }
end_group
